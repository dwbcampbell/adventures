# Using the Rich framework in Python

In this experiment, I try using the [Rich](https://rich.readthedocs.io/en/stable/introduction.html) framework in Python to create a simple console-based UI.

I learned about Rich browsing news about the war in Ukraine. I saw an announcement of a new tool call [Octosuite](https://github.com/bellingcat/octosuite) from [Bellingcat](https://www.bellingcat.com/), the investigative journalism group. This is not a tool I would normally use, but I was curious about the framework they used to create the tool.

# Dialogs
## Dialog #1

Create a python script using the Rich framework which presents a list of actions and expects one of them to be selected.

### ChatGPT

Here's an example of a simple Python script that uses the Rich library to present a list of actions and expects the user to select one:

```python
from rich.prompt import Prompt
from rich.text import Text

# Define a list of actions
actions = ["Option 1", "Option 2", "Option 3"]

# Create a prompt with the list of actions
prompt = Prompt(choices=actions)

# Ask the user to select an action
selected_action = prompt.ask("Please select an action:")

# Print the selected action
print(f"You selected: {selected_action}")

```

The script uses the Prompt class from the Rich library to create a prompt that displays a list of choices. The choices parameter is used to pass in the list of actions. The ask() method is used to display the prompt and wait for the user to make a selection. The selected action is returned as a string and can be stored in a variable or processed in any way you want.


### Implementation

Running the foregoing results in the following:

```bash
douglascampbell@Douglass-MacBook-Air python % python dialog1.py 
Please select an action:: 1
You selected: 1
```

This is not quite what I wanted because it does not display the available actions before asking for one.

## Dialog #2

Display a list of the available actions before asking for the selected actions.

### ChatGPT
Here's an example of a Python script that uses the Rich library to present a list of actions and expects the user to select one after displaying the list of actions:

```python
from rich.prompt import Prompt
from rich.text import Text

# Define a list of actions
actions = ["Option 1", "Option 2", "Option 3"]

# Create a prompt with the list of actions
prompt = Prompt(choices=actions)

# Print the list of actions
print("Available actions:")
for action in actions:
    print(f"- {action}")

# Ask the user to select an action
selected_action = prompt.ask("Please select an action:")

# Print the selected action
print(f"You selected: {selected_action}")

```

This script is similar to the previous one, but it adds a loop that iterates through the list of actions and prints them out before the prompt is displayed. This way the user can see the list of actions before making a selection.

You could also use rich.table to display the list of actions in a tabular format.

```python
from rich.table import Table

# Define a list of actions
actions = [["Option 1"], ["Option 2"], ["Option 3"]]

# Create table
table = Table(title="Available actions")
table.add_column("Actions")

for action in actions:
    table.add_row(*action)

print(table)

# Ask the user to select an action
selected_action = prompt.ask("Please select an action:")

# Print the selected action
print(f"You selected: {selected_action}")

```

This way it will be more readable and easy to understand.

### Implementation

I tried the second suggestion (using a Table to present the options) with the following results:

blah blah blah

## Dialog #3

Change this script so that after accepting an action from the user, it redisplays the table of actions, until a "Quit" action is selected.

### ChatGPT

Here's an example of a Python script that uses the Rich library to present a list of actions, display the table of actions until the user selects "Quit" action:

```python
from rich.prompt import Prompt
from rich.table import Table

# Define a list of actions
actions = [["Option 1"], ["Option 2"], ["Option 3"],["Quit"]]

# Create table
table = Table(title="Available actions")
table.add_column("Actions")

for action in actions:
    table.add_row(*action)

# Ask the user to select an action
while True:
    print(table)
    selected_action = prompt.ask("Please select an action:")
    if selected_action == "Quit":
        break
    else:
        print(f"You selected: {selected_action}")

```

This script uses a while loop that continues to display the table of actions and ask the user to select an action until the user selects "Quit". The break statement is used to exit the loop when the user selects "Quit". Note that the action "Quit" is added to the actions list.

Also, you could add a message to confirm the selected action and ask for confirmation before quiting the application, like this:

```python
while True:
    print(table)
    selected_action = prompt.ask("Please select an action:")
    if selected_action == "Quit":
        confirm = prompt.confirm("Are you sure you want to quit?")
        if confirm:
            break
        else:
            continue
    else:
        print(f"You selected: {selected_action}")

```

This way, the user will have to confirm if they want to quit the application.

### Implementation

## Dialog #4
Recreate the script using the second of the options above (that is, ask for confirmation when quitting). Also, make sure to define the Prompt object and a Console object. Print the table and prompts to the Console, instead of using the standard python print function.

### ChatGPT

Here's an example of a Python script that uses the Rich library to present a list of actions, display the table of actions until the user selects "Quit" action and also using a Console object and Prompt object to print the table and prompts:

```python
from rich.console import Console
from rich.prompt import Prompt
from rich.table import Table

console = Console()
prompt = Prompt()

# Define a list of actions
actions = [["Option 1"], ["Option 2"], ["Option 3"],["Quit"]]

# Create table
table = Table(title="Available actions")
table.add_column("Actions")

for action in actions:
    table.add_row(*action)

# Ask the user to select an action
while True:
    console.print(table)
    selected_action = prompt.ask("Please select an action:")
    if selected_action == "Quit":
        confirm = prompt.confirm("Are you sure you want to quit?")
        if confirm:
            break
        else:
            continue
    else:
        console.print(f"You selected: {selected_action}")

```

This script uses a while loop that continues to display the table of actions and ask the user to select an action until the user selects "Quit". The break statement is used to exit the loop when the user confirms they want to quit. Note that the action "Quit" is added to the actions list. Also, A Console and Prompt objects are defined and it uses these objects to print the table and prompts instead of using the standard python print function.

Also, you could use the Console object to print an error message in case the selected action is not valid.

```python
while True:
    console.print(table)
    selected_action = prompt.ask("Please select an action:")
    if selected_action == "Quit":
        confirm = prompt.confirm("Are you sure you want to quit?")
        if confirm:
            break
        else:
            continue
    elif selected_action not in actions:
        console.print("Invalid action selected", style="red")
    else:
        console.print(f"You selected: {selected_action}")
```

### Implementation

![Console](dialog4.gif)




